type Query {
  me: User!
  contents(limit: Float, offset: Float): ContentsResponse!
}

type User {
  id: ObjectID!
  email: EmailAddress!
  files: [Content!]
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

type Content {
  id: ObjectID!
  filename: String!
  mimetype: String!
  encoding: String!
  size: Float!
  owner: ObjectID!
  createdAt: DateTimeISO!
  updatedAt: DateTimeISO!
  path: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type ContentsResponse {
  data: [Content!]!
  params: ContentsResponseParams!
}

type ContentsResponseParams {
  total: Float!
  currentPage: Float!
}

type Mutation {
  signUp(input: UserInput!): AuthPayload!
  signIn(input: UserInput!): AuthPayload!
  uploadContent(size: Float!, file: Upload!): String!
  deleteContents(ids: [String!]!): Boolean!
}

type AuthPayload {
  token: String!
  user: User!
}

input UserInput {
  email: EmailAddress!
  password: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Subscription {
  uploadProgress: UploadProgressResponse!
}

type UploadProgressResponse {
  load: Float!
  save: Float!
}