# Устанавливает переменную $connection_upgrade в зависимости от наличия заголовка Upgrade.
# Это нужно для корректной поддержки WebSocket:
# - если клиент отправил Upgrade-заголовок (например, при WebSocket-соединении) → установить "upgrade"
# - если нет → установить "close" (по умолчанию закрыть соединение)
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Балансировщик для HTTP соединений
upstream backend_upstream {
    server pet-media-manager-backend-1:${PORT};
    server pet-media-manager-backend-2:${PORT};
}

# Балансировщик для WS соединений
upstream websocket_backend {
    server pet-media-manager-backend-1:${PORT};
}

server {
    listen 80;
    listen [::]:80;
    server_name ${SERVER_HOST} www.${SERVER_HOST};

    # Редирект на HTTPS (раскомментируй при необходимости)
    # return 301 https://$host$request_uri;

    # Отдача статики + SPA fallback
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    # обычные API-запросы с round-robin
    location /api/ {
        proxy_pass http://backend_upstream/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        client_max_body_size 10M;
        proxy_request_buffering off;
    }

    # WebSocket без балансировки — напрямую в один из backend'ов
    location /api/ws/ {
        proxy_pass http://websocket_backend/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}